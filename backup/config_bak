

'''
## trying to generalise
# def get_config():
#     CLARI = dict()
#     sheets = get_data(str(CONFIG_PATH['CONFIG_FILE']))
#     for clart in :
#         config_dict = dict()
#         items = sheets[clart]
#         headers = items[0]
#         for item in items[1:]:
#             if item:
#                 k = item[0]+item[1]
#                 v=dict()
#                 for c, header in enumerate(headers):
#                     v.update({headers[c]:item[c]})
'''


'''
CONFIGS TIDIED INTO DICTS
#
# DIR_DATA = DIR_ROOT / "data"
# DIR_LABEL = DIR_DATA / "Parcelforce Labels"
# JSONFILE = DIR_DATA / "AmShip.json"
# XMLFILE = DIR_DATA.joinpath('AmShip.xml')
# LOGFILE = DIR_DATA.joinpath("AmLog.json")
# CONFIG_FILE = DIR_DATA.joinpath("AmDespConfig.Ods")
# pathlib.Path(DIR_LABEL).mkdir(parents=True, exist_ok=True)  # make the shipmentJson dirs

# DIR_ROOT = pathlib.Path("/Amdesp/")
# DIR_DATA = DIR_ROOT / "data"
# DIR_LABEL = DIR_DATA / "Parcelforce Labels"
# JSONFILE = DIR_DATA / "AmShip.json"
# XMLFILE = DIR_DATA.joinpath('AmShip.xml')
# XMLCUSTOMERSTR = "root[0][1].text"
# LOGFILE = DIR_DATA.joinpath("AmLog.json")
# CONFIG_FILE = DIR_DATA.joinpath("AmDespConfig.Ods")
# pathlib.Path(DIR_LABEL).mkdir(parents=True, exist_ok=True)  # make the shipmentJson dirs


# RADIO_

#### replaced by dict
## Field Control
# EXPORT_EXCLUDE_KEYS = ["addressObject", "dateObject", 'service_object', 'services', 'parcels', 'shipment_return']
# SHIPFIELDS = ["deliveryName", "deliveryContact", "deliveryTel", "deliveryEmail", "deliveryAddress",
#               "deliveryPostcode", "sendOutDate", "referenceNumber"]
#
# HIREFIELDS = ['deliveryTel', 'boxes', 'deliveryCharge', 'deliveryContact', 'deliveryName', 'deliveryEmail',
#               'deliveryAddress', 'sendOutDate', 'sendOutDate', 'deliveryPostcode', 'referenceNumber',
#               'customer']
'''
